% Note: NO WHITESPACE is allowed
% Reference: https://github.com/seancribbs/neotoma/wiki

%%%%%%%sentence <- rule / goal / assertion ` Node ` ;

entry_point <-
			defclause /
			goal /
			term % for testing only
			;

% returns: cryspi_syntax:defclause()
defclause <- head:atom ":-" body:(literal ("," literal)*) "."
		  ` {defclause,
		  	 proplists:get_value(head, Node),
			 datalog_parse:arg_list(proplists:get_value(body, Node))} ` ;

% returns: cryspi_syntax:goal()
goal <- "?-" body:(literal ("," literal)*) "."
	 ` {goal, datalog_parse:arg_list(proplists:get_value(body, Node))} ` ;

% returns: cryspi_syntax:literal()
literal <- atom ;

% returns: cryspi_syntax:catom()
atom <- name:symbol_name "(" args:arg_list ")"
	 ` {pred, proplists:get_value(name, Node), proplists:get_value(args, Node)} ` ;

% returns: cryspi_syntax:clist()
list <- "[" args:arg_list "]"
	 ` {list, proplists:get_value(args, Node)} ` ;

% returns: cryspi_syntax:ht()
ht <- "[" head:arg_list "|" tail:var "]"
   ` {ht, proplists:get_value(head, Node), proplists:get_value(tail, Node)} ` ;

% returns: cryspi_syntax:cterm()
term <- fterm / fconst / int / var / list / ht ;

% returns: cryspi_syntax:fterm()
fterm <- name:symbol_name "(" args:arg_list ")"
	  ` {func, proplists:get_value(name, Node), proplists:get_value(args, Node)} ` ;

% returns: [cryspi_syntax:cterm()]
arg_list <- (term ("," term)*)?
		 ` datalog_parse:arg_list(Node) ` ;

% returns: cryspi_syntax:const()
fconst <- symbol_name
	   ` {const, {func, Node}} ` ;

% returns: string()
symbol_name <- [a-z] [A-Za-z0-9_]*
			` lists:concat([binary_to_list(Char) || Char <- datalog_parse:l(Node)]) ` ;

% returns: cryspi_syntax:var()
var <- [A-Z] [A-Za-z0-9_]*
	` {var, lists:concat([binary_to_list(Char) || Char <- datalog_parse:l(Node)])} ` ;

% returns: cryspi_syntax:const()
int <- [0-9]+
	` Int = binary_to_integer(iolist_to_binary(Node)), {const, {int, Int}} ` ;

% TODO: float
% TODO: strings (with escapes)
